// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Edit me if you're not using Postgres
  url      = env("DATABASE_URL")
}

// 玩家資料
model Player {
  token        String // kktix_token
  name         String // opass user_id
  avatar       String? // jpg, png with token
  linktree     String? // linktree url
  stage        Int     @default(0) // completed stage
  currentStage String? // stage_id
  team_id      String? @db.Uuid // team_id
  compass      Boolean @default(false) // compass status

  team         Team?               @relation(fields: [team_id], references: [team_id])
  fragments    Fragment[]          @relation("PlayerFragment")
  sharedFragments Fragment[]          @relation("SharedPlayerFragment")
  achievements AchievementStatus[]
  scores       PlayerScoreboard?
  boothStatus  BoothStatus[]

  @@id([token])
}

// 隊伍資料
model Team {
  team_id    String          @default(uuid()) @db.Uuid // team_id
  name       String // team name
  // player1_id String?          @unique // token
  // player2_id String?          @unique // token
  // player3_id String?          @unique // token
  // player4_id String?          @unique // token
  players    Player[] 
  scores     TeamScoreboard?

  @@id([team_id])
}

// 碎片資料
model Fragment {
  fragment_id   Int    @default(autoincrement()) // fragment_id
  token         String // 誰的板塊
  shared_token  String?  // 分享者
  type          String // a,b,c
  amount        Int // count
  shared        Boolean @default(false) // 是否為分享板塊
  player        Player @relation("PlayerFragment",fields: [token], references: [token]) // 被誰shared
  shared_player Player? @relation("SharedPlayerFragment",fields: [shared_token], references: [token]) // 分享者

  @@id([fragment_id])
}

// 排行榜
model PlayerScoreboard {
  token  String
  score  Int
  player Player @relation(fields: [token], references: [token])

  @@id([token])
}

model TeamScoreboard {
  team_id String @db.Uuid // team_id
  score   Int // score
  team    Team   @relation(fields: [team_id], references: [team_id])

  @@id([team_id])
}

// 成就
model Achievement {
  achievement_id String              @default(uuid()) @db.Uuid // achievement_id
  name           String // achievement name
  description    String // achievement description
  prize          Int                 @default(0) // count?
  statuses       AchievementStatus[]

  @@id([achievement_id])
}

// 成就狀態
// use object
model AchievementStatus {
  achievement_id String      @db.Uuid
  token          String      @db.Text
  achievement    Achievement @relation(fields: [achievement_id], references: [achievement_id])
  player         Player      @relation(fields: [token], references: [token])

  @@id([achievement_id, token])
}

// 攤位(Complete)
model Booth {
  booth_id String        @default(uuid()) @db.Uuid
  name     String
  statuses BoothStatus[]

  @@id([booth_id])
}

model BoothStatus {
  booth_id String @db.Uuid
  token    String @db.Text
  booth    Booth  @relation(fields: [booth_id], references: [booth_id])
  player   Player @relation(fields: [token], references: [token])

  @@id([booth_id, token])
}

// 關卡ID
model Stage {
  stage_id Int // stage_id
  map      String @db.Text // map

  @@id([stage_id])
}

// 折價券
model Coupon {
  coupon_id String  @default(uuid()) @db.Uuid // coupon_id
  type      Int     @default(0) // type
  used      Boolean @default(false) // used

  @@id(coupon_id)
}

// 抽獎券
model Lottery {
  token      String @db.Text // token
  lottery_id String @db.Text // lottery_id
  type       String // type

  @@id([token, lottery_id])
}
