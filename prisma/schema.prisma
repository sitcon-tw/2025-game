// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Edit me if you're not using Postgres
  url      = env("DATABASE_URL")
}

// 玩家資料
model Player {
  player_id    String              @id // 廢棄 改用kktix_token
  name         String // 抓kktix的name
  avatar       String?
  linktree     String?
  stage        Int                 @default(0) // 已通過關卡數
  currentStage String? // 關卡ID
  team         Team?               @relation(fields: [team_id], references: [team_id])
  team_id      String?             @db.Uuid
  fragments    PlayerFragment[]
  achievements AchievementStatus[]
  scores       PlayerScoreboard?
}

model PlayerBooth {
  player_id String
  booth_id  String @db.Uuid

  @@id([player_id, booth_id])
}

// 隊伍資料
model Team {
  team_id    String          @id @default(uuid()) @db.Uuid
  name       String
  player1_id String          @unique
  player2_id String          @unique
  player3_id String          @unique
  player4_id String          @unique
  players    Player[]
  scores     TeamScoreboard?
}

// 碎片資料
model Fragment {
  fragment_id String           @id @default(uuid()) @db.Uuid
  players     PlayerFragment[]
}

model PlayerFragment {
  fragment_id String   @db.Uuid
  player_id   String
  type        String
  amount      Int
  player      Player   @relation(fields: [player_id], references: [player_id])
  fragment    Fragment @relation(fields: [fragment_id], references: [fragment_id])

  @@id([fragment_id, player_id])
}

// 排行榜
model PlayerScoreboard {
  player_id String @id
  score     Int
  player    Player @relation(fields: [player_id], references: [player_id])
}

model TeamScoreboard {
  team_id String @id @db.Uuid
  score   Int
  team    Team   @relation(fields: [team_id], references: [team_id])
}

// 成就
model Achievement {
  achievement_id String              @id @default(uuid()) @db.Uuid
  prize          Int
  statuses       AchievementStatus[]
}

// 成就狀態
model AchievementStatus {
  achievement_id String      @db.Uuid
  player_id      String      @db.Text
  achievement    Achievement @relation(fields: [achievement_id], references: [achievement_id])
  player         Player      @relation(fields: [player_id], references: [player_id])

  @@id([achievement_id, player_id])
}

// 攤位(Complete)
model Booth {
  booth_id String @id @default(uuid()) @db.Uuid
  name     String
}

// 關卡ID
model Stage {
  stage_id      String    @id @default(uuid()) @db.Uuid
  floor         Int
  start_x       Int       @default(0)
  start_y       Int       @default(0)
  start_z       Int       @default(0)
  end_x         Int       @default(0)
  end_y         Int       @default(0)
  end_z         Int       @default(0)
  size          Int       @default(0)
  blocker_count Int       @default(0)
  blockers      Blocker[]
}

// 障礙物
model Blocker {
  blocker_id String @id @default(uuid()) @db.Uuid
  stage_id   String @db.Uuid
  x          Int
  y          Int
  z          Int
  stage      Stage  @relation(fields: [stage_id], references: [stage_id])
}
